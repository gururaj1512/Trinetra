import { useState, useRef, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Upload, Play, Pause, RotateCcw, Eye, Camera, Download, AlertCircle, CheckCircle, Loader2, X } from 'lucide-react';

interface VideoUpload {
  id: number;
  file: File | null;
  url: string | null;
  title: string;
  isPlaying: boolean;
}

interface DetectionResult {
  success: boolean;
  message: string;
  output_video?: string;
  detection_frame?: string;
  detection_summary?: {
    total_frames: number;
    detected_frames: number;
    detection_timestamps: number[];
  };
}

const MonitoringDashboard = () => {
  const [videos, setVideos] = useState<VideoUpload[]>([
    { id: 1, file: null, url: null, title: 'Crowd Density Analysis', isPlaying: false },
    { id: 2, file: null, url: null, title: 'Face Recognition System', isPlaying: false },
    { id: 3, file: null, url: null, title: 'Behavior Analysis', isPlaying: false },
    { id: 4, file: null, url: null, title: 'Emergency Detection', isPlaying: false },
  ]);

  // Face Recognition states
  const [personImage, setPersonImage] = useState<File | null>(null);
  const [crowdVideo, setCrowdVideo] = useState<File | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [result, setResult] = useState<DetectionResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [tolerance, setTolerance] = useState(0.6);
  const [frameSkip, setFrameSkip] = useState(5);
  const [showFaceRecognition, setShowFaceRecognition] = useState(false);
  const [isVideoPlaying, setIsVideoPlaying] = useState(false);
  const [videoError, setVideoError] = useState<string | null>(null);
  const [videoLoading, setVideoLoading] = useState(false);
  const [showNativeControls, setShowNativeControls] = useState(false);
  const [cloudinaryVideoUrl, setCloudinaryVideoUrl] = useState<string | null>(null);
  const [uploadingToCloudinary, setUploadingToCloudinary] = useState(false);
  
  const personImageRef = useRef<HTMLInputElement>(null);
  const crowdVideoRef = useRef<HTMLInputElement>(null);
  const outputVideoRef = useRef<HTMLVideoElement>(null);

  const API_BASE_URL = ''; // Use Vite proxy
  const CLOUDINARY_UPLOAD_PRESET = 'sachin';
  const CLOUDINARY_CLOUD_NAME = 'drxliiejo';

  // Auto-reload video when Cloudinary URL changes
  useEffect(() => {
    if (cloudinaryVideoUrl && outputVideoRef.current) {
      console.log('Cloudinary URL changed, reloading video:', cloudinaryVideoUrl);
      outputVideoRef.current.load();
    }
  }, [cloudinaryVideoUrl]);

  // Check Flask server health
  const checkServerHealth = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/health`);
      if (response.ok) {
        const data = await response.json();
        console.log('Server health check:', data);
        return true;
      } else {
        console.error('Server health check failed:', response.status);
        return false;
      }
    } catch (error) {
      console.error('Server health check error:', error);
      return false;
    }
  };

  // Test video URL accessibility
  const testVideoUrl = async (videoUrl: string) => {
    try {
      const response = await fetch(videoUrl, { method: 'HEAD' });
      console.log('Video URL test:', {
        url: videoUrl,
        status: response.status,
        contentType: response.headers.get('content-type'),
        contentLength: response.headers.get('content-length')
      });
      return response.ok;
    } catch (error) {
      console.error('Video URL test error:', error);
      return false;
    }
  };

  const handleVideoUpload = (id: number, file: File) => {
    const url = URL.createObjectURL(file);
    setVideos(prev => prev.map(video => 
      video.id === id ? { ...video, file, url, isPlaying: false } : video
    ));
  };

  const togglePlay = (id: number) => {
    setVideos(prev => prev.map(video => 
      video.id === id ? { ...video, isPlaying: !video.isPlaying } : video
    ));
  };

  const resetVideo = (id: number) => {
    setVideos(prev => prev.map(video => 
      video.id === id ? { ...video, url: null, file: null, isPlaying: false } : video
    ));
  };

  // Face Recognition functions
  const handlePersonImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setPersonImage(file);
      setError(null);
    }
  };

  const handleCrowdVideoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setCrowdVideo(file);
      setError(null);
    }
  };

  const handleFaceRecognitionUpload = async () => {
    if (!personImage || !crowdVideo) {
      setError('Please select both a person image and crowd video');
      return;
    }

    setIsUploading(true);
    setError(null);
    setResult(null);

    // Check server health first
    const isServerHealthy = await checkServerHealth();
    if (!isServerHealthy) {
      setError('Flask server is not responding. Please check if the server is running on 3.109.123.3:5001');
      setIsUploading(false);
      return;
    }

    try {
      const formData = new FormData();
      formData.append('person_image', personImage);
      formData.append('crowd_video', crowdVideo);
      formData.append('tolerance', tolerance.toString());
      formData.append('frame_skip', frameSkip.toString());

      const response = await fetch(`${API_BASE_URL}/api/detect`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('API Error Response:', errorText);
        setError(`Server error (${response.status}): ${errorText}`);
        return;
      }

      const data = await response.json();

      if (data.success) {
        setResult(data);
        // Automatically upload video to Cloudinary
        if (data.output_video) {
          const videoUrl = `/api/view/${data.output_video}`;
          await uploadVideoToCloudinary(videoUrl, data.output_video);
        }
      } else {
        setError(data.error || 'Detection failed');
      }
    } catch (err) {
      setError('Network error. Please check if the API server is running.');
      console.error('Upload error:', err);
    } finally {
      setIsUploading(false);
    }
  };

  const handleDownload = (filename: string) => {
    window.open(`${API_BASE_URL}/api/download/${filename}`, '_blank');
  };

  const handleView = (filename: string) => {
    window.open(`${API_BASE_URL}/api/view/${filename}`, '_blank');
  };

  const clearFaceRecognitionFiles = () => {
    setPersonImage(null);
    setCrowdVideo(null);
    setResult(null);
    setError(null);
    setIsVideoPlaying(false);
    setVideoError(null);
    setVideoLoading(false);
    setShowNativeControls(false);
    setCloudinaryVideoUrl(null);
    setUploadingToCloudinary(false);
    if (personImageRef.current) personImageRef.current.value = '';
    if (crowdVideoRef.current) crowdVideoRef.current.value = '';
  };

  const toggleVideoPlayback = () => {
    if (outputVideoRef.current) {
      if (isVideoPlaying) {
        outputVideoRef.current.pause();
      } else {
        outputVideoRef.current.play();
      }
      setIsVideoPlaying(!isVideoPlaying);
    }
  };

  const uploadVideoToCloudinary = async (videoUrl: string, filename: string) => {
    setUploadingToCloudinary(true);
    try {
      // Fetch the video file from the server
      const response = await fetch(videoUrl);
      const videoBlob = await response.blob();
      
      // Create FormData for Cloudinary upload
      const formData = new FormData();
      formData.append('file', videoBlob, filename);
      formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);
      formData.append('resource_type', 'video');
      
      // Upload to Cloudinary
      const cloudinaryResponse = await fetch(
        `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/video/upload`,
        {
          method: 'POST',
          body: formData,
        }
      );
      
      if (cloudinaryResponse.ok) {
        const cloudinaryData = await cloudinaryResponse.json();
        setCloudinaryVideoUrl(cloudinaryData.secure_url);
        console.log('Video uploaded to Cloudinary:', cloudinaryData.secure_url);
        
        // Force video reload with new URL
        setTimeout(() => {
          if (outputVideoRef.current) {
            outputVideoRef.current.load();
          }
        }, 100);
        
        return cloudinaryData.secure_url;
      } else {
        throw new Error('Failed to upload to Cloudinary');
      }
    } catch (error) {
      console.error('Error uploading to Cloudinary:', error);
      setUploadingToCloudinary(false);
      return null;
    } finally {
      setUploadingToCloudinary(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-black pt-20 pb-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <h1 className="text-4xl md:text-5xl font-bold mb-4">
            <span className="bg-gradient-to-r from-orange-400 to-amber-400 bg-clip-text text-transparent">
              ML Monitoring Dashboard
            </span>
          </h1>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto">
            Upload videos to test your machine learning models in real-time CCTV monitoring environment
          </p>
        </motion.div>

        {/* Control Panel */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="bg-white/10 backdrop-blur-md rounded-2xl p-6 mb-8 border border-white/20"
        >
          <div className="flex flex-col md:flex-row justify-between items-center gap-4">
            <div className="flex items-center space-x-4">
              <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
              <span className="text-white font-medium">Live Monitoring Active</span>
            </div>
            <div className="flex items-center space-x-4 text-gray-300">
              <span>Resolution: 1080p</span>
              <span>•</span>
              <span>FPS: 30</span>
              <span>•</span>
              <span className="flex items-center space-x-1">
                <Eye size={16} />
                <span>4 Cameras</span>
              </span>
            </div>
          </div>
        </motion.div>

        {/* Video Grid */}
        <div className="grid md:grid-cols-2 gap-6">
          {videos.map((video, index) => (
            <motion.div
              key={video.id}
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.3 + index * 0.1 }}
              className="bg-white/10 backdrop-blur-md rounded-2xl overflow-hidden border border-white/20 hover:border-orange-400/50 transition-all duration-300"
            >
              {/* Header */}
              <div className="p-4 border-b border-white/20">
                <div className="flex justify-between items-center">
                  <h3 className="text-white font-semibold">{video.title}</h3>
                  <div className="flex space-x-2">
                    {video.id === 2 && (
                      <button
                        onClick={() => setShowFaceRecognition(!showFaceRecognition)}
                        className="w-8 h-8 bg-blue-500 hover:bg-blue-600 rounded-full flex items-center justify-center transition-colors"
                      >
                        <Camera size={16} className="text-white" />
                      </button>
                    )}
                    {video.url && video.id !== 2 && (
                      <>
                        <button
                          onClick={() => togglePlay(video.id)}
                          className="w-8 h-8 bg-orange-500 hover:bg-orange-600 rounded-full flex items-center justify-center transition-colors"
                        >
                          {video.isPlaying ? <Pause size={16} className="text-white" /> : <Play size={16} className="text-white ml-0.5" />}
                        </button>
                        <button
                          onClick={() => resetVideo(video.id)}
                          className="w-8 h-8 bg-gray-600 hover:bg-gray-500 rounded-full flex items-center justify-center transition-colors"
                        >
                          <RotateCcw size={16} className="text-white" />
                        </button>
                      </>
                    )}
                  </div>
                </div>
              </div>

              {/* Face Recognition Interface */}
              {video.id === 2 && showFaceRecognition ? (
                <div className="p-4 space-y-4">
                  {/* Show Output Video if Detection Successful */}
                  {result && result.success && result.output_video ? (
                    <div className="space-y-3">
                      {/* Video Player */}
                      <div className="relative bg-gray-800 rounded-lg overflow-hidden">
                        {videoLoading && (
                          <div className="absolute inset-0 flex items-center justify-center bg-gray-800">
                            <div className="text-center">
                              <Loader2 size={32} className="animate-spin text-blue-400 mx-auto mb-2" />
                              <p className="text-gray-300 text-sm">Loading video...</p>
                            </div>
                          </div>
                        )}
                        
                        {videoError ? (
                          <div className="w-full h-48 flex items-center justify-center bg-gray-800">
                            <div className="text-center text-gray-400">
                              <AlertCircle size={32} className="mx-auto mb-2" />
                              <p className="text-sm">Video not available</p>
                              <p className="text-xs text-gray-500 mt-1">{videoError}</p>
                              <div className="mt-2 flex gap-2 justify-center flex-wrap">
                                <button
                                  onClick={() => {
                                    if (outputVideoRef.current) {
                                      outputVideoRef.current.load();
                                    }
                                  }}
                                  className="px-2 py-1 bg-orange-500 text-white rounded text-xs hover:bg-orange-600 transition-colors"
                                >
                                  Retry
                                </button>
                                <button
                                  onClick={async () => {
                                    const videoUrl = `/api/view/${result.output_video}`;
                                    const isAccessible = await testVideoUrl(videoUrl);
                                    alert(isAccessible ? 
                                      `✅ Video URL is accessible: ${videoUrl}` : 
                                      `❌ Video URL is not accessible: ${videoUrl}`
                                    );
                                  }}
                                  className="px-2 py-1 bg-purple-500 text-white rounded text-xs hover:bg-purple-600 transition-colors"
                                >
                                  Test URL
                                </button>
                                <button
                                  onClick={() => handleDownload(result.output_video!)}
                                  className="px-2 py-1 bg-blue-500 text-white rounded text-xs hover:bg-blue-600 transition-colors"
                                >
                                  Download
                                </button>
                                <button
                                  onClick={() => handleView(result.output_video!)}
                                  className="px-2 py-1 bg-green-500 text-white rounded text-xs hover:bg-green-600 transition-colors"
                                >
                                  View in New Tab
                                </button>
                              </div>
                            </div>
                          </div>
                        ) : (
                          <video
                            key={cloudinaryVideoUrl || `/api/view/${result.output_video}`}
                            ref={outputVideoRef}
                            className="w-full h-48 object-cover"
                            loop
                            muted
                            preload="metadata"
                            playsInline
                            controls={showNativeControls}
                            onPlay={() => setIsVideoPlaying(true)}
                            onPause={() => setIsVideoPlaying(false)}
                            onLoadStart={() => {
                              setVideoLoading(true);
                              setVideoError(null);
                              console.log('Video loading started');
                            }}
                            onLoadedMetadata={() => {
                              console.log('Video metadata loaded');
                            }}
                            onCanPlay={() => {
                              setVideoLoading(false);
                              console.log('Video can play');
                            }}
                            onCanPlayThrough={() => {
                              setVideoLoading(false);
                              console.log('Video can play through');
                            }}
                            onError={(e) => {
                              setVideoLoading(false);
                              console.error('Video load error:', e);
                              console.error('Video src:', cloudinaryVideoUrl || `/api/view/${result.output_video}`);
                              console.error('Video error details:', e.currentTarget.error);
                              console.error('Video network state:', e.currentTarget.networkState);
                              console.error('Video ready state:', e.currentTarget.readyState);
                              
                              const error = e.currentTarget.error;
                              const networkState = e.currentTarget.networkState;
                              const readyState = e.currentTarget.readyState;
                              
                              let errorMessage = 'Failed to load video. ';
                              
                              if (error) {
                                switch (error.code) {
                                  case 1:
                                    errorMessage += 'Video loading was aborted.';
                                    break;
                                  case 2:
                                    errorMessage += 'Network error occurred while loading video.';
                                    break;
                                  case 3:
                                    errorMessage += 'Video decoding error.';
                                    break;
                                  case 4:
                                    errorMessage += 'Video format not supported by browser. Try downloading the video instead.';
                                    break;
                                  default:
                                    errorMessage += `Unknown video error (code: ${error.code}).`;
                                }
                                errorMessage += ` Error: ${error.message}`;
                              } else if (networkState === 3) {
                                errorMessage += 'Network error - unable to load video from server.';
                              } else if (readyState === 0) {
                                errorMessage += 'Video metadata not loaded - server may be down.';
                              } else {
                                errorMessage += 'Unknown error occurred while loading video.';
                              }
                              
                              setVideoError(errorMessage);
                            }}
                          >
                            <source src={cloudinaryVideoUrl || `/api/view/${result.output_video}`} type="video/mp4" />
                            <source src={cloudinaryVideoUrl || `/api/view/${result.output_video}`} type="video/webm" />
                            <source src={cloudinaryVideoUrl || `/api/view/${result.output_video}`} type="video/ogg" />
                            Your browser does not support the video tag.
                          </video>
                        )}
                        {/* Video Controls Overlay */}
                        {!showNativeControls && (
                          <div className="absolute bottom-2 left-2 right-2">
                            <div className="bg-black/60 backdrop-blur-sm rounded-lg p-2 flex items-center justify-between">
                              <button
                                onClick={toggleVideoPlayback}
                                className="flex items-center gap-2 text-white hover:text-blue-400 transition-colors"
                              >
                                {isVideoPlaying ? <Pause size={16} /> : <Play size={16} />}
                                <span className="text-xs font-medium">
                                  {isVideoPlaying ? 'Pause' : 'Play'}
                                </span>
                              </button>
                              <div className="flex items-center gap-2">
                                <button
                                  onClick={() => setShowNativeControls(true)}
                                  className="text-xs text-gray-300 hover:text-white transition-colors"
                                >
                                  Show Controls
                                </button>
                                <div className="text-xs text-gray-300">
                                  Detection Video
                                </div>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>

                      {/* Cloudinary Upload Status */}
                      {uploadingToCloudinary && (
                        <div className="bg-blue-500/20 border border-blue-500/30 rounded-lg p-3">
                          <div className="flex items-center gap-2 text-blue-300">
                            <Loader2 size={16} className="animate-spin" />
                            <span className="text-sm font-medium">Uploading to Cloudinary...</span>
                          </div>
                        </div>
                      )}

                      {cloudinaryVideoUrl && (
                        <div className="bg-green-500/20 border border-green-500/30 rounded-lg p-3">
                          <div className="flex items-center gap-2 text-green-300">
                            <CheckCircle size={16} />
                            <span className="text-sm font-medium">Video uploaded to Cloudinary!</span>
                          </div>
                          <p className="text-green-200 text-xs mt-1">
                            Now streaming from Cloudinary CDN
                          </p>
                          <button
                            onClick={() => {
                              if (outputVideoRef.current) {
                                outputVideoRef.current.load();
                              }
                            }}
                            className="mt-2 px-2 py-1 bg-green-500 text-white rounded text-xs hover:bg-green-600 transition-colors"
                          >
                            Reload Video
                          </button>
                        </div>
                      )}

                      {/* Debug Info - Remove this in production */}
                      {/* <div className="bg-gray-900/50 rounded-lg p-2 text-xs text-gray-400">
                        <p><strong>Debug Info:</strong></p>
                        <p>Original URL: <code>/api/view/{result.output_video}</code></p>
                        {cloudinaryVideoUrl && (
                          <p>Cloudinary URL: <code>{cloudinaryVideoUrl}</code></p>
                        )}
                        <p>Result: {JSON.stringify(result, null, 2)}</p>
                      </div> */}

                      {/* Detection Summary */}
                      {result.detection_summary && (
                        <div className="bg-gray-800/50 rounded-lg p-3">
                          <h4 className="font-semibold text-white text-sm mb-2">Detection Summary</h4>
                          <div className="grid grid-cols-2 gap-2 text-xs">
                            <div>
                              <span className="text-gray-400">Total Frames:</span>
                              <span className="text-white ml-1">{result.detection_summary.total_frames}</span>
                            </div>
                            <div>
                              <span className="text-gray-400">Detected:</span>
                              <span className="text-green-400 ml-1">{result.detection_summary.detected_frames}</span>
                            </div>
                            <div className="col-span-2">
                              <span className="text-gray-400">Success Rate:</span>
                              <span className="text-white ml-1">
                                {((result.detection_summary.detected_frames / result.detection_summary.total_frames) * 100).toFixed(1)}%
                              </span>
                            </div>
                          </div>
                        </div>
                      )}

                      {/* Download/View Buttons */}
                      <div className="flex gap-2">
                        <button
                          onClick={() => handleView(result.output_video!)}
                          className="flex-1 flex items-center justify-center gap-1 px-2 py-1 bg-blue-500 text-white rounded text-xs hover:bg-blue-600 transition-colors"
                        >
                          <Eye size={12} />
                          View in New Tab
                        </button>
                        <button
                          onClick={() => handleDownload(result.output_video!)}
                          className="flex-1 flex items-center justify-center gap-1 px-2 py-1 bg-green-500 text-white rounded text-xs hover:bg-green-600 transition-colors"
                        >
                          <Download size={12} />
                          Download
                        </button>
                        {!cloudinaryVideoUrl && !uploadingToCloudinary && (
                          <button
                            onClick={() => {
                              const videoUrl = `/api/view/${result.output_video}`;
                              uploadVideoToCloudinary(videoUrl, result.output_video!);
                            }}
                            className="flex-1 flex items-center justify-center gap-1 px-2 py-1 bg-purple-500 text-white rounded text-xs hover:bg-purple-600 transition-colors"
                          >
                            <Upload size={12} />
                            Upload to Cloudinary
                          </button>
                        )}
                      </div>

                      {result.detection_frame && (
                        <div className="flex gap-2">
                          <button
                            onClick={() => handleView(result.detection_frame!)}
                            className="flex-1 flex items-center justify-center gap-1 px-2 py-1 bg-purple-500 text-white rounded text-xs hover:bg-purple-600 transition-colors"
                          >
                            <Eye size={12} />
                            View Frame
                          </button>
                          <button
                            onClick={() => handleDownload(result.detection_frame!)}
                            className="flex-1 flex items-center justify-center gap-1 px-2 py-1 bg-orange-500 text-white rounded text-xs hover:bg-orange-600 transition-colors"
                          >
                            <Download size={12} />
                            Download Frame
                          </button>
                        </div>
                      )}
                    </div>
                  ) : (
                    /* Upload Interface - Show when no successful detection */
                    <>
                      {/* Person Image Upload */}
                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Person Image (to find)
                        </label>
                        <div className="border-2 border-dashed border-gray-600 rounded-lg p-4 text-center hover:border-blue-400 transition-colors">
                          <input
                            ref={personImageRef}
                            type="file"
                            accept="image/*"
                            onChange={handlePersonImageChange}
                            className="hidden"
                          />
                          <Camera size={24} className="mx-auto text-gray-400 mb-2" />
                          <p className="text-gray-400 text-sm mb-2">
                            {personImage ? personImage.name : 'Click to select person image'}
                          </p>
                          <button
                            onClick={() => personImageRef.current?.click()}
                            className="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600 transition-colors"
                          >
                            Select Image
                          </button>
                        </div>
                      </div>

                      {/* Crowd Video Upload */}
                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Crowd Video (to search in)
                        </label>
                        <div className="border-2 border-dashed border-gray-600 rounded-lg p-4 text-center hover:border-blue-400 transition-colors">
                          <input
                            ref={crowdVideoRef}
                            type="file"
                            accept="video/*"
                            onChange={handleCrowdVideoChange}
                            className="hidden"
                          />
                          <Upload size={24} className="mx-auto text-gray-400 mb-2" />
                          <p className="text-gray-400 text-sm mb-2">
                            {crowdVideo ? crowdVideo.name : 'Click to select crowd video'}
                          </p>
                          <button
                            onClick={() => crowdVideoRef.current?.click()}
                            className="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600 transition-colors"
                          >
                            Select Video
                          </button>
                        </div>
                      </div>

                      {/* Settings */}
                      <div className="space-y-3">
                        <div>
                          <label className="block text-sm font-medium text-gray-300 mb-1">
                            Recognition Tolerance: {tolerance}
                          </label>
                          <input
                            type="range"
                            min="0.1"
                            max="1.0"
                            step="0.1"
                            value={tolerance}
                            onChange={(e) => setTolerance(parseFloat(e.target.value))}
                            className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-300 mb-1">
                            Frame Skip: {frameSkip}
                          </label>
                          <input
                            type="range"
                            min="1"
                            max="10"
                            step="1"
                            value={frameSkip}
                            onChange={(e) => setFrameSkip(parseInt(e.target.value))}
                            className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer"
                          />
                        </div>
                      </div>

                      {/* Action Buttons */}
                      <div className="flex gap-2">
                        <button
                            onClick={async () => {
                              const isHealthy = await checkServerHealth();
                              if (isHealthy) {
                                alert('✅ Server is healthy and responding!');
                              } else {
                                alert('❌ Server is not responding. Check if Flask server is running on 3.109.123.3:5001');
                              }
                            }}
                            className="px-3 py-2 bg-blue-500 text-white rounded text-sm hover:bg-blue-600 transition-colors flex items-center gap-2"
                          >
                            <CheckCircle size={16} />
                            Check Server
                          </button>
                          
                          <button
                            onClick={handleFaceRecognitionUpload}
                            disabled={!personImage || !crowdVideo || isUploading}
                            className="flex-1 flex items-center justify-center gap-2 px-3 py-2 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded text-sm hover:from-blue-600 hover:to-purple-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300"
                          >
                            {isUploading ? (
                              <>
                                <Loader2 size={16} className="animate-spin" />
                                Processing...
                              </>
                            ) : (
                              <>
                                <Camera size={16} />
                                Start Detection
                              </>
                            )}
                          </button>
                        </div>
                        
                        <button
                          onClick={clearFaceRecognitionFiles}
                          className="px-3 py-2 bg-gray-600 text-white rounded text-sm hover:bg-gray-500 transition-colors"
                        >
                          <X size={16} />
                        </button>
                      </div>

                      {/* Results */}
                      {error && (
                        <div className="p-3 bg-red-500/20 border border-red-500/30 rounded-lg">
                          <div className="flex items-center gap-2 text-red-300">
                            <AlertCircle size={16} />
                            <span className="text-sm font-medium">Error</span>
                          </div>
                          <p className="text-red-200 text-sm mt-1">{error}</p>
                        </div>
                      )}

                      {result && !result.success && (
                        <div className="p-3 bg-red-500/20 border border-red-500/30 rounded-lg">
                          <div className="flex items-center gap-2 text-red-300">
                            <AlertCircle size={16} />
                            <span className="text-sm font-medium">Detection Failed</span>
                          </div>
                          <p className="text-red-200 text-sm mt-1">{result.message}</p>
                        </div>
                      )}
                    </>
                  )}
                </div>
              ) : (
                /* Regular Video Area */
                <div className="aspect-video bg-gray-800 relative">
                  {videos.find(v => v.id === 2)?.url ? (
                    <video
                      src={videos.find(v => v.id === 2)?.url}
                      className="w-full h-full object-cover"
                      loop
                      muted
                      ref={(el) => {
                        const video = videos.find(v => v.id === 2);
                        if (video?.isPlaying) el?.play();
                        else el?.pause();
                      }}
                    />
                  ) : (
                    <div className="w-full h-full flex flex-col items-center justify-center text-gray-400">
                      <Upload size={32} className="mb-4" />
                      <p className="text-sm font-medium mb-2">Upload Video</p>
                      <p className="text-xs opacity-75 text-center px-4">
                        Drop your test video here for ML model analysis
                      </p>
                      <input
                        type="file"
                        accept="video/*"
                        onChange={(e) => {
                          const file = e.target.files?.[0];
                          if (file) handleVideoUpload(2, file);
                        }}
                        className="absolute inset-0 opacity-0 cursor-pointer"
                      />
                    </div>
                  )}
                  
                  {/* Processing Overlay */}
                  {videos.find(v => v.id === 2)?.url && (
                    <div className="absolute bottom-4 left-4 right-4">
                      <div className="bg-black/60 backdrop-blur-sm rounded-lg p-3 text-white">
                        <div className="flex items-center justify-between text-xs">
                          <span className="text-green-400">● Processing</span>
                          <span>Model: YOLOv8</span>
                        </div>
                        <div className="flex items-center justify-between text-xs mt-1">
                          <span>Objects: 12</span>
                          <span>Confidence: 94%</span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </motion.div>
          ))}
        </div>

        {/* Analytics Panel */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.8 }}
          className="mt-8 bg-white/10 backdrop-blur-md rounded-2xl p-6 border border-white/20"
        >
          <h3 className="text-white text-xl font-bold mb-6">Real-Time Analytics</h3>
          <div className="grid md:grid-cols-4 gap-6">
            {[
              { label: 'Total Detections', value: '1,247', change: '+12%' },
              { label: 'Average Confidence', value: '92.5%', change: '+2.1%' },
              { label: 'Processing Speed', value: '28 FPS', change: '+5%' },
              { label: 'Active Models', value: '4/4', change: '100%' },
            ].map((stat) => (
              <div key={stat.label} className="text-center">
                <div className="text-2xl font-bold text-white mb-1">{stat.value}</div>
                <div className="text-gray-300 text-sm mb-1">{stat.label}</div>
                <div className="text-green-400 text-xs">{stat.change}</div>
              </div>
            ))}
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default MonitoringDashboard;